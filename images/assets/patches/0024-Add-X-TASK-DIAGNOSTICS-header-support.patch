From f9c10f816bc01f38c5c912a37c0e75f8a1fe6895 Mon Sep 17 00:00:00 2001
From: Dennis Kliban <dkliban@redhat.com>
Date: Tue, 24 Jun 2025 16:17:08 -0400
Subject: [PATCH] Add X-TASK-DIAGNOSTICS header support

This allows individual tasks to be profiled. The value must be one of "memory", "pyinstrument", "memray".
---
 pulpcore/tasking/_util.py | 4 ++++
 pulpcore/tasking/tasks.py | 8 ++++++++
 2 files changed, 12 insertions(+)

diff --git a/pulpcore/tasking/_util.py b/pulpcore/tasking/_util.py
index cdadfb8f5..4f72a7261 100644
--- a/pulpcore/tasking/_util.py
+++ b/pulpcore/tasking/_util.py
@@ -127,10 +127,14 @@ def perform_task(task_pk, task_working_dir_rel_path):
     set_domain(task.pulp_domain)
     os.chdir(task_working_dir_rel_path)
 
+    original_task_diagnostics = list(settings.TASK_DIAGNOSTICS)
+    if task.enc_kwargs and "task_diagnostics" in task.enc_kwargs:
+        settings.TASK_DIAGNOSTICS = task.enc_kwargs["task_diagnostics"]
     if settings.TASK_DIAGNOSTICS:
         _execute_task_and_profile(task)
     else:
         execute_task(task)
+    settings.TASK_DIAGNOSTICS = original_task_diagnostics
 
 
 def _execute_task_and_profile(task):
diff --git a/pulpcore/tasking/tasks.py b/pulpcore/tasking/tasks.py
index fabe8f737..c95988a40 100644
--- a/pulpcore/tasking/tasks.py
+++ b/pulpcore/tasking/tasks.py
@@ -30,6 +30,7 @@ from pulpcore.tasking.kafka import send_task_notification
 
 _logger = logging.getLogger(__name__)
 
+from pulp_service.app.middleware import x_task_diagnostics_var
 
 def _validate_and_get_resources(resources):
     resource_set = set()
@@ -53,6 +54,8 @@ def wakeup_worker():
 
 
 def execute_task(task):
+    if task.enc_kwargs:
+        task.enc_kwargs.pop("task_diagnostics", None)
     # This extra stack is needed to isolate the current_task ContextVar
     contextvars.copy_context().run(_execute_task, task)
 
@@ -197,6 +200,11 @@ def dispatch(
         ValueError: When `resources` is an unsupported type.
     """
 
+    task_diagnostics = x_task_diagnostics_var.get(None)
+    if task_diagnostics:
+        kwargs["task_diagnostics"] = [task_diagnostics]
+        x_task_diagnostics_var.set(None)
+
     # Can't run short tasks immediately if running from thread pool
     immediate = immediate and not running_from_thread_pool()
     assert deferred or immediate, "A task must be at least `deferred` or `immediate`."
-- 
2.49.0

