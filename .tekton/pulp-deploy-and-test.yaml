# Adapted from https://github.com/RedHatInsights/bonfire-tekton/blob/main/pipelines/basic.yaml
# But the change is to run our functional test script rather than the IQE tests.
# Keep in sync with it.
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: bonfire
  annotations:
    pipelinesascode.tekton.dev/on-cel-expression: event == "pull_request" && target_branch
      == "main" && files.all.exists(x, x.matches('.tekton/'))
  labels:
    build.appstudio.redhat.com/pipeline: "bonfire"
spec:
  params:
    - name: URL
      type: string
      description: URL of the Git repository use for fetching the tasks
      default: 'https://github.com/RedHatInsights/bonfire-tekton'
    - name: URL_ORIG
      type: string
      description: URL of the Git repository use for fetching the tasks
      default: 'https://github.com/RedHatInsights/bonfire-tekton'
    - name: REVISION
      type: string
      description: Git commit revision to use for fetching the tasks
      default: main
    - name: REVISION_ORIG
      type: string
      description: Git commit revision to use for fetching the tasks
      default: main
    - name: BONFIRE_IMAGE
      type: string
      description: The container Bonfire image to use for the tekton tasks
      default: quay.io/redhat-user-workloads/hcc-devprod-tenant/hcc-cicd-tools/cicd-tools:834176766e3f911ffa24bfacff59dd15126e4b3a
    - name: SNAPSHOT
      type: string
      description: |
        Spec section of an ApplicationSnapshot resource. Not all fields of the
        resource are required. A minimal example:
          {
            "components": [
              {
                "containerImage": "quay.io/example/repo:latest"
              }
            ]
          }
        Each "containerImage" in the "components" array is validated.
    - name: EPHEMERAL_ENV_PROVIDER_SECRET
      type: string
      default: ephemeral-env-provider
      description: "Secret for connecting to ephemeral env provider cluster"
    - name: APP_INTERFACE_SECRET
      type: string
      default: app-interface
      description: "Secret for connecting to app-interface"
    - name: APP_NAME
      type: string
      description: name of app-sre "application" folder this component lives in
      default: "pulp"
    - name: COMPONENTS
      type: string
      description: space-separated list of components to load
      default: ""
    - name: COMPONENTS_W_RESOURCES
      type: string
      description: component to keep
      default: ""
    - name: AWS_SECRET
      type: string
      default: rh-artifacts-bucket
      description: Secret with connection details to S3
    - name: BONFIRE_COMPONENT_NAME
      type: string
      default: ""
      description: name of the app-sre component name
    - name: COMPONENT_NAME
      type: string
      description: name of app-sre "resourceTemplate" in deploy.yaml for this component
      default: "pulp"
    - name: EXTRA_DEPLOY_ARGS
      type: string
      description: "Extra arguments for the deployment"
      default: ""
    - name: DEPLOY_FRONTENDS
      type: string
      description: "Deploy frontend in the env or not"
      default: ""

  results:
    - name: ARTIFACTS_URL
      description: URL for the test's artifacts
      value: $(finally.teardown.results.ARTIFACTS_URL)
  finally:
    - name: teardown
      params:
        - name: NS
          value: "$(tasks.reserve-namespace.results.NS)"
        - name: NS_REQUESTER
          value: "$(context.pipelineRun.name)"
        - name: ARTIFACTS_KEY
          value: "$(context.pipelineRun.namespace)/$(context.pipelineRun.name)"
        - name: AWS_SECRET
          value: "$(params.AWS_SECRET)"
        - name: BONFIRE_IMAGE
          value: "$(params.BONFIRE_IMAGE)"
      taskRef:
        resolver: git
        params:
          - name: url
            value: "$(params.URL_ORIG)"
          - name: revision
            value: "$(params.REVISION_ORIG)"
          - name: pathInRepo
            value: tasks/teardown.yaml
  tasks:
    - name: reserve-namespace
      params:
        - name: NS_REQUESTER
          value: "$(context.pipelineRun.name)"
        - name: EPHEMERAL_ENV_PROVIDER_SECRET
          value: "$(params.EPHEMERAL_ENV_PROVIDER_SECRET)"
        - name: BONFIRE_IMAGE
          value: "$(params.BONFIRE_IMAGE)"
      taskRef:
        resolver: git
        params:
          - name: url
            value: "$(params.URL_ORIG)"
          - name: revision
            value: "$(params.REVISION_ORIG)"
          - name: pathInRepo
            value: tasks/reserve-namespace.yaml
    - name: deploy-application
      params:
        - name: BONFIRE_IMAGE
          value: "$(params.BONFIRE_IMAGE)"
        - name: SNAPSHOT
          value: "$(params.SNAPSHOT)"
        - name: NS
          value: "$(tasks.reserve-namespace.results.NS)"
        - name: NS_REQUESTER
          value: "$(context.pipelineRun.name)"
        - name: APP_INTERFACE_SECRET
          value: "$(params.APP_INTERFACE_SECRET)"
        - name: APP_NAME
          value: "$(params.APP_NAME)"
        - name: BONFIRE_COMPONENT_NAME
          value: "$(params.BONFIRE_COMPONENT_NAME)"
        - name: COMPONENTS
          value: "$(params.COMPONENTS)"
        - name: COMPONENTS_W_RESOURCES
          value: "$(params.COMPONENTS_W_RESOURCES)"
        - name: EXTRA_DEPLOY_ARGS
          value: "$(params.EXTRA_DEPLOY_ARGS)"
        - name: DEPLOY_FRONTENDS
          value: "$(params.DEPLOY_FRONTENDS)"
      runAfter:
        - reserve-namespace
      taskRef:
        resolver: git
        params:
          - name: url
            value: "$(params.URL_ORIG)"
          - name: revision
            value: "$(params.REVISION_ORIG)"
          - name: pathInRepo
            value: tasks/deploy.yaml
    - name: pulp-functional-tests
      runAfter:
        - deploy-application
      params:
        - name: BONFIRE_IMAGE
          type: string
          value: "$(params.BONFIRE_IMAGE)"
        - name: NS
          type: string
          value: "$(tasks.reserve-namespace.results.NS)"
        - name: EPHEMERAL_ENV_PROVIDER_SECRET
          type: string
          value: "$(params.EPHEMERAL_ENV_PROVIDER_SECRET)"
      taskSpec:
        params:
          - name: BONFIRE_IMAGE
            type: string
            description: The container Bonfire image to use for the tekton tasks
            default: quay.io/redhat-user-workloads/hcc-devprod-tenant/hcc-cicd-tools/cicd-tools:834176766e3f911ffa24bfacff59dd15126e4b3a
          - name: EPHEMERAL_ENV_PROVIDER_SECRET
            type: string
            default: ephemeral-env-provider
          - name: NS
            type: string
            description: Namespace name to deploy the application to
        steps:
          - name: functional-tests
            image: "$(params.BONFIRE_IMAGE)"
            env:
              - name: OC_LOGIN_TOKEN
                valueFrom:
                  secretKeyRef:
                    name: $(params.EPHEMERAL_ENV_PROVIDER_SECRET)
                    key: token
              - name: OC_LOGIN_SERVER
                valueFrom:
                  secretKeyRef:
                    name: $(params.EPHEMERAL_ENV_PROVIDER_SECRET)
                    key: url
              - name: NS
                value: $(params.NS)
            script: |
              set -ex

              login.sh

              if [ -n "$NS" ]; then
                oc_wrapper project $NS
              else
                export NS=$(oc_wrapper project | grep -oE 'ephemeral-......')
              fi
              echo "Namespace is $NS"

              PASSWORD=$(oc_wrapper extract secret/pulp-admin-password --to=-)

              POD=$(oc_wrapper get pod | grep -oE "pulp-api\S*")
              echo $POD
              oc_wrapper get pod $POD -o yaml | grep memory:

              oc_wrapper get clowdenvironment env-$(oc_wrapper project | grep -oE 'ephemeral-......') -o yaml

              oc_wrapper get clowdapp pulp -o yaml

              ### Adapted from ./.github/workflows/scripts/utils.sh
              # Run a command
              cmd_prefix() {
                oc_wrapper exec "$POD" -- "$@"
              }

              # Run a command, and pass STDIN
              cmd_stdin_prefix() {
                oc_wrapper exec -i "$POD" -- "$@"
              }
              ### END Adapted from ./.github/workflows/scripts/utils.sh

              debug_and_fail() {
                oc_wrapper logs $(oc_wrapper get pod | grep -oE "pulp-content\S*")
                echo "CURL OUTPUT"
                curl https://env-${NS}.apps.crc-eph.r9lp.p1.openshiftapps.com/api/pulp-content/default/
                echo "ROUTES"
                oc_wrapper get route
                exit 1
              }

              cmd_prefix bash -c "HOME=/tmp/home pip3 install pytest\<8"
              cmd_prefix git clone https://github.com/mikedep333/pulp-openapi-scratch-builds.git /tmp/home/pulp-openapi-scratch-builds | /bin/true
              cmd_prefix bash -c "HOME=/tmp/home pip3 install -e /tmp/home/pulp-openapi-scratch-builds/pulpcore-client"
              cmd_prefix bash -c "HOME=/tmp/home pip3 install -e /tmp/home/pulp-openapi-scratch-builds/pulp_file-client"
              cmd_prefix bash -c "HOME=/tmp/home pip3 install -e /tmp/home/pulp-openapi-scratch-builds/pulp_rpm-client"
              cmd_prefix bash -c "HOME=/tmp/home pip3 install -e /tmp/home/pulp-openapi-scratch-builds/pulp_ostree-client"

              cmd_prefix mkdir -p /tmp/home/.config/pulp_smash
              cat << EOF >> pulp-smash.json
              {
                "pulp": {
                  "auth": [
                    "admin",
                    "password"
                  ],
                  "selinux enabled": false,
                  "version": "3"
                },
                "hosts": [
                  {
                    "hostname": "pulp-api-svc",
                    "roles": {
                      "api": {
                        "port": 24817,
                        "scheme": "http",
                        "service": "nginx"
                      },
                      "content": {
                        "port": 443,
                        "scheme": "https",
                        "service": "pulp-content-svc"
                      },
                      "pulp resource manager": {},
                      "pulp workers": {},
                      "redis": {},
                      "shell": {
                        "transport": "local"
                      }
                    }
                  }
                ]
              }
              EOF
              sed "s#password#${PASSWORD}#g" pulp-smash.json > pulp-smash.customized.json
              sed -i "s/pulp-content-svc/env-${NS}.apps.crc-eph.r9lp.p1.openshiftapps.com/g" pulp-smash.customized.json

              echo "PULP-SMASH CONFIG:"
              cat pulp-smash.customized.json

              curl -o functest_requirements.txt https://raw.githubusercontent.com/pulp/pulp_rpm/main/functest_requirements.txt
              curl -o unittest_requirements.txt https://raw.githubusercontent.com/pulp/pulp_rpm/main/unittest_requirements.txt

              ### Adapted from ./.github/workflows/scripts/script.sh
              cat unittest_requirements.txt | cmd_stdin_prefix bash -c "cat > /tmp/unittest_requirements.txt"
              cat functest_requirements.txt | cmd_stdin_prefix bash -c "cat > /tmp/functest_requirements.txt"
              cat pulp-smash.customized.json | cmd_stdin_prefix bash -c "cat > /tmp/home/.config/pulp_smash/settings.json"
              cmd_prefix bash -c "HOME=/tmp/home pip3 install -r /tmp/unittest_requirements.txt -r /tmp/functest_requirements.txt"
              # Because we pass the path to pytest -o cache_dir=/tmp/home/.cache/pytest_cache, pulpcore-manager must be in the same dir
              cmd_prefix bash -c "ln -s /usr/local/lib/pulp/bin/pulpcore-manager /tmp/home/.local/bin/pulpcore-manager || /bin/true"
              echo "CURL OUTPUT"
              curl https://env-${NS}.apps.crc-eph.r9lp.p1.openshiftapps.com/api/pulp-content/default/
              echo "ROUTES"
              oc_wrapper get route
              set +e
              # Only testing test_download_content because it is a very thorough test that tests that all the components of pulp can work
              cmd_prefix bash -c "HOME=/tmp/home PYTHONPATH=/tmp/home/.local/lib/python3.9/site-packages/ XDG_CONFIG_HOME=/tmp/home/.config API_PROTOCOL=http API_HOST=pulp-api-svc API_PORT=24817 ADMIN_USERNAME=admin ADMIN_PASSWORD=$PASSWORD /tmp/home/.local/bin/pytest -o cache_dir=/tmp/home/.cache/pytest_cache -v -r sx --color=yes --suppress-no-test-exit-code --pyargs pulp_rpm.tests.functional -m parallel -n 8 -k 'test_download_content or test_rbac_crud' --junitxml=/tmp/home/junit-pulp-parallel.xml" || debug_and_fail
              # Never test test_package_manager_consume because they require sudo
              # Do not test test_domain_create because it requires more than 2GB of RAM
              # Only testing test_download_policies because they are very thorough tests that test that all the components of pulp can work
              cmd_prefix bash -c "HOME=/tmp/home PYTHONPATH=/tmp/home/.local/lib/python3.9/site-packages/ XDG_CONFIG_HOME=/tmp/home/.config API_PROTOCOL=http API_HOST=pulp-api-svc API_PORT=24817 ADMIN_USERNAME=admin ADMIN_PASSWORD=$PASSWORD /tmp/home/.local/bin/pytest -o cache_dir=/tmp/home/.cache/pytest_cache -v -r sx --color=yes --pyargs pulp_rpm.tests.functional -m 'not parallel' -k 'test_download_policies' --junitxml=/tmp/home/junit-pulp-serial.xml" || debug_and_fail

              # Run the jq header auth test
              cmd_prefix bash -c "HOME=/tmp/home PYTHONPATH=/tmp/home/.local/lib/python3.9/site-packages/ XDG_CONFIG_HOME=/tmp/home/.config API_PROTOCOL=http API_HOST=pulp-api-svc API_PORT=24817 ADMIN_USERNAME=admin ADMIN_PASSWORD=$PASSWORD /tmp/home/.local/bin/pytest -o cache_dir=/tmp/home/.cache/pytest_cache -v -r sx --color=yes --pyargs pulpcore.tests.functional -m 'parallel' -n 8 -k 'test_jq_header_remote_auth' --junitxml=/tmp/home/junit-pulp-serial.xml" || debug_and_fail

              ### END Adapted from ./.github/workflows/scripts/script.sh

              cmd_prefix bash -c "HOME=/tmp/home PYTHONPATH=/tmp/home/.local/lib/python3.9/site-packages/ XDG_CONFIG_HOME=/tmp/home/.config API_PROTOCOL=http API_HOST=pulp-api-svc API_PORT=24817 ADMIN_USERNAME=admin ADMIN_PASSWORD=$PASSWORD /tmp/home/.local/bin/pytest -o cache_dir=/tmp/home/.cache/pytest_cache -v -r sx --color=yes --suppress-no-test-exit-code --pyargs pulp_ostree.tests.functional -m parallel -n 16 --junitxml=/tmp/home/junit-pulp-parallel.xml" || debug_and_fail
              cmd_prefix bash -c "HOME=/tmp/home PYTHONPATH=/tmp/home/.local/lib/python3.9/site-packages/ XDG_CONFIG_HOME=/tmp/home/.config API_PROTOCOL=http API_HOST=pulp-api-svc API_PORT=24817 ADMIN_USERNAME=admin ADMIN_PASSWORD=$PASSWORD /tmp/home/.local/bin/pytest -o cache_dir=/tmp/home/.cache/pytest_cache -v -r sx --color=yes --pyargs pulp_ostree.tests.functional -m 'not parallel' --junitxml=/tmp/home/junit-pulp-serial.xml" || debug_and_fail
