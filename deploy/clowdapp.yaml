apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: pulp
objects:
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: pulp-otel-collector-config
  data:
    otel-collector-config: |
      receivers:
        otlp:
          protocols:
            http:
              endpoint: 0.0.0.0:10000
      processors:
        batch:
        memory_limiter:
          check_interval: 1s
          limit_mib: 2048
        transform:
          error_mode: ignore
          metric_statements:
            - context: metric
              statements:
                - set(description, "Duration of HTTP server requests.") where name == "http.server.duration"
      exporters:
        prometheus:
          endpoint: "0.0.0.0:9000"
          namespace: pulp
      service:
        pipelines:
          metrics:
            receivers: [otlp]
            processors: [transform, memory_limiter, batch]
            exporters: [prometheus]
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: domain-storage-map
  data:
    domain-storage-script: |
      from django.conf import settings as s
      config = f"{{\"access_key\": \"{s.AWS_ACCESS_KEY_ID}\", \"secret_key\": \"{s.AWS_SECRET_ACCESS_KEY}\", \"bucket_name\": \"{s.AWS_STORAGE_BUCKET_NAME}\", \"region_name\": \"us-east-1\", \"default_acl\": \"private\"}}"
      print(config)
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: config-sh-map
  data:
    config-sh-file: |
      #!/bin/bash
      export PATH=${PATH}:/tmp/bin

      kubectl get secret
      retVal=$?
      echo $retVal
      if [ $retVal -ne 0 ]; then
         echo "Stopping here because we are running on the staging environment or we cannot retrieve secrets"
         exit 0
      fi

      mkdir /tmp/bin
      cd /tmp/bin
      curl -L -O https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
      mv jq-linux64 jq
      chmod +x jq

      # https://docs.pulpproject.org/pulp_operator/configuring/storage/#configuring-pulp-operator-to-use-object-storage
      S3_ACCESS_KEY_ID=$(cat /cdapp/cdappconfig.json | jq -r '.objectStore.buckets[0].accessKey')
      S3_SECRET_ACCESS_KEY=$(cat /cdapp/cdappconfig.json | jq -r '.objectStore.buckets[0].secretKey')
      S3_BUCKET_NAME=$(cat /cdapp/cdappconfig.json | jq -r '.objectStore.buckets[0].name')
      #S3_REGION='us-east-1'
      S3_HOSTNAME=$(cat /cdapp/cdappconfig.json | jq -r '.objectStore.hostname')

      DB_HOST=$(cat /cdapp/cdappconfig.json | jq -r '.database.hostname')
      DB_NAME=$(cat /cdapp/cdappconfig.json | jq -r '.database.name')
      DB_USER=$(cat /cdapp/cdappconfig.json | jq -r '.database.adminUsername')
      DB_PASSWORD=$(cat /cdapp/cdappconfig.json | jq -r '.database.adminPassword')
      
      ENV_NAME=$(cat /cdapp/cdappconfig.json | ./jq -r '.metadata.envName')

      HOST=${ENV_NAME}.apps.crc-eph.r9lp.p1.openshiftapps.com

      # Generate a db key
      openssl rand -base64 32 > /tmp/database_fields.symmetric.key
      kubectl create secret generic pulp-db-fields-encryption --from-file /tmp/database_fields.symmetric.key

      # Generate admin password
      openssl rand -base64 32 | tr -d '\n' > /tmp/password
      kubectl create secret generic pulp-admin-password --from-file /tmp/password
      rm /tmp/password

      # Generate contentsources user password
      openssl rand -base64 32 | tr -d '\n' > /tmp/password
      kubectl create secret generic pulp-content-sources-password --from-file /tmp/password

      # Create settings.py
      cat <<EOF > /tmp/settings.py
      # Auto-generated settings file
      import secrets
      
      API_ROOT = "/api/pulp/"
      DB_ENCRYPTION_KEY = "/etc/pulp/keys/database_fields.symmetric.key"
      DATABASES = {
        'default': {
          'HOST': '$DB_HOST',
          'ENGINE': 'django.db.backends.postgresql_psycopg2',
          'NAME': '$DB_NAME',
          'USER': '$DB_USER',
          'PASSWORD': '$DB_PASSWORD',
          'PORT': '5432',
          'CONN_MAX_AGE': 0,
          'OPTIONS': { 'sslmode': 'disable' },
        }
      }
      CACHE_ENABLED = True
      REDIS_HOST =  "$(cat /cdapp/cdappconfig.json | jq -r '.inMemoryDb.hostname')"
      REDIS_PORT =  "$(cat /cdapp/cdappconfig.json | jq -r '.inMemoryDb.port')"
      REDIS_PASSWORD = ""
      AWS_S3_ENDPOINT_URL = "http://${S3_HOSTNAME}:9000"
      AWS_S3_REGION_NAME = "east"
      AWS_ACCESS_KEY_ID = '$S3_ACCESS_KEY_ID'
      AWS_SECRET_ACCESS_KEY = '$S3_SECRET_ACCESS_KEY'
      AWS_STORAGE_BUCKET_NAME = '$S3_BUCKET_NAME'
      AWS_DEFAULT_ACL = "@none None"
      S3_USE_SIGV4 = True
      AWS_S3_SIGNATURE_VERSION = "s3v4"
      AWS_S3_ADDRESSING_STYLE = "path"
      DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
      MEDIA_ROOT = ""
      SECRET_KEY = secrets.token_urlsafe(50)
      CONTENT_ORIGIN = "https://$HOST"
      CONTENT_PATH_PREFIX = "/api/pulp-content/"
      DOMAIN_ENABLED = True
      REDIS_DB = "1"
      EOF
      
      kubectl create secret generic pulp-settings --from-file /tmp/settings.py



- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: migrate-sh-map
  data:
    migrate-sh-file: |
      #!/bin/bash
      set -e
      /usr/local/lib/pulp/bin/pulpcore-manager migrate --noinput
      touch /tmp/migrated
      while true; do
        sleep 1d
      done

- apiVersion: cloud.redhat.com/v1alpha1
  kind: ClowdApp
  metadata:
    name: pulp
  spec:
    envName: "${ENV_NAME}"
    testing:
      iqePlugin: content-sources
    deployments:

    - name: otel-collector
      replicas: 1
      webServices:
        private:
          enabled: true
      podSpec:
        image: "registry.redhat.io/rhosdt/opentelemetry-collector-rhel8"
        args:
         - "--config"
         - "file:/etc/otelcol-contrib/otel-collector-config.yaml"
        volumes:
          - name: otel-config
            configMap:
              name: pulp-otel-collector-config
        volumeMounts:
          - name: otel-config
            mountPath: /etc/otelcol-contrib/otel-collector-config.yaml
            subPath: otel-collector-config
        resources:
          requests:
            cpu: ${{OTEL_COLLECTOR_CPU_REQUEST}}
            memory: ${{OTEL_COLLECTOR_MEMORY_REQUEST}}
          limits:
            cpu: ${{OTEL_COLLECTOR_CPU_LIMIT}}
            memory: ${{OTEL_COLLECTOR_MEMORY_LIMIT}}

    - name: api
      replicas: ${{PULP_API_REPLICAS}}
      webServices:
        public:
          enabled: true
          apiPath: pulp
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG}
        command: ['/usr/local/lib/pulp/bin/opentelemetry-instrument', '--service_name', 'pulp-api', '--exporter_otlp_endpoint', 'http://pulp-otel-collector:10000', '--exporter_otlp_insecure', 'true', 'pulpcore-api', '-b', '0.0.0.0:8000', '--timeout', '90', '--workers', '${PULP_API_GUNICORN_WORKERS}', '--access-logfile', '-']
        # command: ['pulpcore-api', '-b', '0.0.0.0:8000', '--timeout', '90', '--workers', '${PULP_API_GUNICORN_WORKERS}', '--access-logfile', '-']
        volumeMounts:
        - name: secret-volume
          mountPath: "/etc/pulp/keys"
        - name: pulp-settings
          mountPath: "/etc/pulp/settings.py"
          subPath: "settings.py"
        volumes:
          - name: secret-volume
            secret:
              secretName: pulp-db-fields-encryption
          - name: pulp-settings
            secret:
              secretName: pulp-settings
        initContainers:
          - name: wait-on-migrations
            image: ${IMAGE}:${IMAGE_TAG}
            command: ["/bin/sh"]
            args:
              - "-c"
              - "/usr/bin/wait_on_postgres.py && /usr/bin/wait_on_database_migrations.sh"
            inheritEnv: True
        readinessProbe:
          httpGet:
            path: /api/pulp/api/v3/livez/
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 60
          timeoutSeconds: 60
        livenessProbe:
          httpGet:
            path: /api/pulp/api/v3/livez/
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 120
          timeoutSeconds: 120
        terminationGracePeriod: 120
        resources:
          requests:
            cpu: ${{PULP_API_CPU_REQUEST}}
            memory: ${{PULP_API_MEMORY_REQUEST}}
          limits:
            cpu: ${{PULP_API_CPU_LIMIT}}
            memory: ${{PULP_API_MEMORY_LIMIT}}
        env:
          - name: PULP_OTEL_ENABLED
            value: ${TELEMETRY_ENABLED}
          - name: OTEL_EXPORTER_OTLP_PROTOCOL
            value: ${{OTEL_EXPORTER_OTLP_PROTOCOL}}
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: ${{OTEL_EXPORTER_OTLP_ENDPOINT}}
          - name: OTEL_METRIC_EXPORT_INTERVAL
            value: ${OTEL_METRIC_EXPORT_INTERVAL}
          - name: OTEL_METRIC_EXPORT_TIMEOUT
            value: ${OTEL_METRIC_EXPORT_TIMEOUT}
          - name: OTEL_TRACES_EXPORTER
            value: "none"
          - name: PULP_REDIS_PORT
            value: "6379"
          - name: SENTRY_DSN
            valueFrom:
              secretKeyRef:
                name: pulp-glitchtip
                key: dsn
                optional: true
          - name: PULP_API_ROOT
            value: ${{PULP_API_ROOT}}
          - name: PULP_DB_ENCRYPTION_KEY
            value: ${{PULP_DB_ENCRYPTION_KEY}}
          - name: PULP_CACHE_ENABLED
            value: ${PULP_CACHE_ENABLED}
          - name: PULP_AWS_DEFAULT_ACL
            value: ${{PULP_AWS_DEFAULT_ACL}}
          - name: PULP_S3_USE_SIGV4
            value: ${PULP_S3_USE_SIGV4}
          - name: PULP_AWS_S3_SIGNATURE_VERSION
            value: ${{PULP_AWS_S3_SIGNATURE_VERSION}}
          - name: PULP_AWS_S3_ADDRESSING_STYLE
            value: ${{PULP_AWS_S3_ADDRESSING_STYLE}}
          - name: PULP_DEFAULT_FILE_STORAGE
            value: ${{PULP_DEFAULT_FILE_STORAGE}}
          - name: PULP_MEDIA_ROOT
            value: ${{PULP_MEDIA_ROOT}}
          - name: PULP_CONTENT_ORIGIN
            value: ${{PULP_CONTENT_ORIGIN}}
          - name: PULP_CONTENT_PATH_PREFIX
            value: ${{PULP_CONTENT_PATH_PREFIX}}
          - name: PULP_DOMAIN_ENABLED
            value: ${PULP_DOMAIN_ENABLED}
          - name: PULP_REST_FRAMEWORK__DEFAULT_PERMISSION_CLASSES
            value: ${{PULP_REST_FRAMEWORK__DEFAULT_PERMISSION_CLASSES}}
          - name: PULP_AUTHENTICATION_BACKENDS
            value: ${{PULP_AUTHENTICATION_BACKENDS}}
          - name: PULP_REST_FRAMEWORK__DEFAULT_AUTHENTICATION_CLASSES
            value: ${{PULP_REST_FRAMEWORK__DEFAULT_AUTHENTICATION_CLASSES}}
          - name: PULP_AUTHENTICATION_JSON_HEADER
            value: ${{PULP_AUTHENTICATION_JSON_HEADER}}
          - name: PULP_AUTHENTICATION_JSON_HEADER_JQ_FILTER
            value: ${{PULP_AUTHENTICATION_JSON_HEADER_JQ_FILTER}}
          - name: PULP_AUTHENTICATION_JSON_HEADER_OPENAPI_SECURITY_SCHEME
            value: ${{PULP_AUTHENTICATION_JSON_HEADER_OPENAPI_SECURITY_SCHEME}}
          - name: PULP_ALLOWED_CONTENT_CHECKSUMS
            value: ${PULP_ALLOWED_CONTENT_CHECKSUMS}
          - name: PULP_INSTALLED_APPS
            value: ${PULP_INSTALLED_APPS}
          - name: PULP_CSRF_TRUSTED_ORIGINS
            value: ${PULP_CSRF_TRUSTED_ORIGINS}
          - name: PULP_STATIC_URL
            value: ${PULP_STATIC_URL}

    - name: content
      replicas: ${{PULP_CONTENT_REPLICAS}}
      webServices:
        public:
          enabled: true
          apiPath: pulp-content
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG}
        command: ['/usr/local/lib/pulp/bin/opentelemetry-instrument', '--service_name', 'pulp-content', '--exporter_otlp_endpoint', 'http://pulp-otel-collector:10000', '--exporter_otlp_insecure', 'true', 'pulpcore-content', '-b', '0.0.0.0:8000', '--access-logfile', '-']
        volumeMounts:
          - name: secret-volume
            mountPath: "/etc/pulp/keys"
          - name: pulp-settings
            mountPath: "/etc/pulp/settings.py"
            subPath: "settings.py"
        volumes:
          - name: secret-volume
            secret:
              secretName: pulp-db-fields-encryption
          - name: pulp-settings
            secret:
              secretName: pulp-settings
        initContainers:
          - name: wait-on-migrations
            image: ${IMAGE}:${IMAGE_TAG}
            command: [ "/bin/sh" ]
            args:
              - "-c"
              - "/usr/bin/wait_on_postgres.py && /usr/bin/wait_on_database_migrations.sh"
            inheritEnv: True
        readinessProbe:
          httpGet:
            path: /api/pulp-content/default/
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 60
          timeoutSeconds: 60
        livenessProbe:
          httpGet:
            path: /api/pulp-content/default/
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 120
          timeoutSeconds: 120
        terminationGracePeriod: 120
        resources:
          requests:
            cpu: ${{PULP_CONTENT_CPU_REQUEST}}
            memory: ${{PULP_CONTENT_MEMORY_REQUEST}}
          limits:
            cpu: ${{PULP_CONTENT_CPU_LIMIT}}
            memory: ${{PULP_CONTENT_MEMORY_LIMIT}}
        env:
          - name: PULP_OTEL_ENABLED
            value: ${TELEMETRY_ENABLED}
          - name: OTEL_EXPORTER_OTLP_PROTOCOL
            value: ${{OTEL_EXPORTER_OTLP_PROTOCOL}}
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: ${{OTEL_EXPORTER_OTLP_ENDPOINT}}
          - name: OTEL_TRACES_EXPORTER
            value: "none"
          - name: PULP_REDIS_PORT
            value: "6379"
          - name: SENTRY_DSN
            valueFrom:
              secretKeyRef:
                name: pulp-glitchtip
                key: dsn
                optional: true
          - name: PULP_API_ROOT
            value: ${{PULP_API_ROOT}}
          - name: PULP_DB_ENCRYPTION_KEY
            value: ${{PULP_DB_ENCRYPTION_KEY}}
          - name: PULP_CACHE_ENABLED
            value: ${PULP_CACHE_ENABLED}
          - name: PULP_AWS_DEFAULT_ACL
            value: ${{PULP_AWS_DEFAULT_ACL}}
          - name: PULP_S3_USE_SIGV4
            value: ${PULP_S3_USE_SIGV4}
          - name: PULP_AWS_S3_SIGNATURE_VERSION
            value: ${{PULP_AWS_S3_SIGNATURE_VERSION}}
          - name: PULP_AWS_S3_ADDRESSING_STYLE
            value: ${{PULP_AWS_S3_ADDRESSING_STYLE}}
          - name: PULP_DEFAULT_FILE_STORAGE
            value: ${{PULP_DEFAULT_FILE_STORAGE}}
          - name: PULP_MEDIA_ROOT
            value: ${{PULP_MEDIA_ROOT}}
          - name: PULP_CONTENT_ORIGIN
            value: ${{PULP_CONTENT_ORIGIN}}
          - name: PULP_CONTENT_PATH_PREFIX
            value: ${{PULP_CONTENT_PATH_PREFIX}}
          - name: PULP_DOMAIN_ENABLED
            value: ${PULP_DOMAIN_ENABLED}
          - name: PULP_ALLOWED_CONTENT_CHECKSUMS
            value: ${PULP_ALLOWED_CONTENT_CHECKSUMS}

    - name: worker
      replicas: ${{PULP_WORKER_REPLICAS}}
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG}
        command: [ 'pulpcore-worker' ]
        volumeMounts:
          - name: secret-volume
            mountPath: "/etc/pulp/keys"
          - name: pulp-settings
            mountPath: "/etc/pulp/settings.py"
            subPath: "settings.py"
        volumes:
          - name: secret-volume
            secret:
              secretName: pulp-db-fields-encryption
          - name: pulp-settings
            secret:
              secretName: pulp-settings
        initContainers:
          - name: wait-on-migrations
            image: ${IMAGE}:${IMAGE_TAG}
            command: [ "/bin/sh" ]
            args:
              - "-c"
              - "/usr/bin/wait_on_postgres.py && /usr/bin/wait_on_database_migrations.sh"
            inheritEnv: True
        readinessProbe:
          exec:
            command:
              - "/usr/bin/wait_on_postgres.py"
          initialDelaySeconds: 3
          periodSeconds: 10
          timeoutSeconds: 10
        resources:
          requests:
            cpu: ${{PULP_WORKER_CPU_REQUEST}}
            memory: ${{PULP_WORKER_MEMORY_REQUEST}}
          limits:
            cpu: ${{PULP_WORKER_CPU_LIMIT}}
            memory: ${{PULP_WORKER_MEMORY_LIMIT}}
        env:
          - name: PULP_OTEL_ENABLED
            value: ${TELEMETRY_ENABLED}
          - name: OTEL_EXPORTER_OTLP_PROTOCOL
            value: ${{OTEL_EXPORTER_OTLP_PROTOCOL}}
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: ${{OTEL_EXPORTER_OTLP_ENDPOINT}}
          - name: OTEL_TRACES_EXPORTER
            value: "none"
          - name: PULP_REDIS_PORT
            value: "6379"
          - name: SENTRY_DSN
            valueFrom:
              secretKeyRef:
                name: pulp-glitchtip
                key: dsn
                optional: true
          - name: PULP_API_ROOT
            value: ${{PULP_API_ROOT}}
          - name: PULP_DB_ENCRYPTION_KEY
            value: ${{PULP_DB_ENCRYPTION_KEY}}
          - name: PULP_CACHE_ENABLED
            value: ${PULP_CACHE_ENABLED}
          - name: PULP_AWS_DEFAULT_ACL
            value: ${{PULP_AWS_DEFAULT_ACL}}
          - name: PULP_S3_USE_SIGV4
            value: ${PULP_S3_USE_SIGV4}
          - name: PULP_AWS_S3_SIGNATURE_VERSION
            value: ${{PULP_AWS_S3_SIGNATURE_VERSION}}
          - name: PULP_AWS_S3_ADDRESSING_STYLE
            value: ${{PULP_AWS_S3_ADDRESSING_STYLE}}
          - name: PULP_DEFAULT_FILE_STORAGE
            value: ${{PULP_DEFAULT_FILE_STORAGE}}
          - name: PULP_MEDIA_ROOT
            value: ${{PULP_MEDIA_ROOT}}
          - name: PULP_CONTENT_ORIGIN
            value: ${{PULP_CONTENT_ORIGIN}}
          - name: PULP_CONTENT_PATH_PREFIX
            value: ${{PULP_CONTENT_PATH_PREFIX}}
          - name: PULP_DOMAIN_ENABLED
            value: ${PULP_DOMAIN_ENABLED}
          - name: PULP_ALLOWED_CONTENT_CHECKSUMS
            value: ${PULP_ALLOWED_CONTENT_CHECKSUMS}

    - name: migrate-db
      replicas: 1
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG}
        command: [ 'bash', '-x', '/tmp/migrate.sh' ]
        volumeMounts:
          - name: migrate-sh
            mountPath: /tmp/migrate.sh
            subPath: migrate-sh-file
          - name: secret-volume
            mountPath: "/etc/pulp/keys"
          - name: pulp-settings
            mountPath: "/etc/pulp/settings.py"
            subPath: "settings.py"
        volumes:
          - name: migrate-sh
            configMap:
              name: migrate-sh-map
          - name: secret-volume
            secret:
              secretName: pulp-db-fields-encryption
          - name: pulp-settings
            secret:
              secretName: pulp-settings
        initContainers:
          - name: wait-on-migrations
            image: ${IMAGE}:${IMAGE_TAG}
            command: [ "/usr/bin/wait_on_postgres.py" ]
            inheritEnv: True
        readinessProbe:
          exec:
            command: ["stat", "/tmp/migrated"]
          initialDelaySeconds: 2
          periodSeconds: 2
          timeoutSeconds: 10
        env:
          - name: PULP_CONTENT_ORIGIN
            value: ${{PULP_CONTENT_ORIGIN}}
          - name: PULP_DB_ENCRYPTION_KEY
            value: ${{PULP_DB_ENCRYPTION_KEY}}
          - name: SENTRY_DSN
            valueFrom:
              secretKeyRef:
                name: pulp-glitchtip
                key: dsn
                optional: true
          - name: PULP_ALLOWED_CONTENT_CHECKSUMS
            value: ${PULP_ALLOWED_CONTENT_CHECKSUMS}

    database:
      name: pulp
      version: 15
    inMemoryDb: true
    objectStore:
      - ${{OBJECT_STORE_NAME}}
    jobs:
      - name: create-settings-and-ingress
        podSpec:
          image: "quay.io/openshift/origin-cli:latest"
          command: [ 'bash', '-x', '/tmp/config.sh' ]
          volumes:
            - name: config-sh
              configMap:
                name: config-sh-map
          volumeMounts:
            - name: config-sh
              mountPath: /tmp/config.sh
              subPath: config-sh-file
          resources:
            requests:
              memory: 192Mi
              cpu: 250m
            limits:
              memory: 384Mi
              cpu: 500m
      - name: reset-admin-password
        podSpec:
          image: ${IMAGE}:${IMAGE_TAG}
          command: [ '/bin/sh' ]
          args: ['-c', '/usr/local/lib/pulp/bin/pulpcore-manager reset-admin-password --password "$PULP_ADMIN_PASSWORD"' ]
          env:
            - name: PULP_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pulp-admin-password
                  key: password
                  optional: true
            - name: PULP_CONTENT_ORIGIN
              value: ${{PULP_CONTENT_ORIGIN}}
          volumeMounts:
            - name: secret-volume
              mountPath: "/etc/pulp/keys"
            - name: pulp-settings
              mountPath: "/etc/pulp/settings.py"
              subPath: "settings.py"
          volumes:
            - name: secret-volume
              secret:
                secretName: pulp-db-fields-encryption
            - name: pulp-settings
              secret:
                secretName: pulp-settings
      - name: create-contentsources-user
        podSpec:
          image: ${IMAGE}:${IMAGE_TAG}
          command: [ 'pulpcore-manager' ]
          args:
            - "shell"
            - "-c"
            - |
              from os import getenv
              from django.contrib.auth import get_user_model
              User = get_user_model()
              user, created = User.objects.get_or_create(username='contentsources')
              password = getenv("CONTENT_SOURCES_PASSWORD")
              user.set_password(password)
              user.is_superuser = False
              user.save()
          volumeMounts:
            - name: secret-volume
              mountPath: "/etc/pulp/keys"
            - name: pulp-settings
              mountPath: "/etc/pulp/settings.py"
              subPath: "settings.py"
          volumes:
            - name: secret-volume
              secret:
                secretName: pulp-db-fields-encryption
            - name: pulp-settings
              secret:
                secretName: pulp-settings
          env:
            - name: CONTENT_SOURCES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pulp-content-sources-password
                  key: password
                  optional: false
            - name: XDG_CONFIG_HOME
              value: "/tmp"
            - name: XDG_CACHE_HOME
              value: "/tmp"

- apiVersion: cloud.redhat.com/v1alpha1
  kind: ClowdJobInvocation
  metadata:
    name: reset-admin-password-1
  spec:
    appName: pulp
    jobs:
      - reset-admin-password
- apiVersion: cloud.redhat.com/v1alpha1
  kind: ClowdJobInvocation
  metadata:
    name: pulp-create-settings-and-ingress
  spec:
    appName: pulp
    runOnNotReady: True
    jobs:
      - create-settings-and-ingress
- apiVersion: cloud.redhat.com/v1alpha1
  kind: ClowdJobInvocation
  metadata:
    name: create-contentsources-user
  spec:
    appName: pulp
    jobs:
      - create-contentsources-user

parameters:
  - name: ENV_NAME
    description: Specify your (ephemeral) namespace
    required: true
  - name: IMAGE
    description: Specify which container image the operator will deploy as Pulp services.
    value: quay.io/redhat-services-prod/pulp-services-tenant/pulp
  - name: IMAGE_TAG
    description: Specify the tag or hash for the image deployed by the operator.
    value: latest
  - name: DOMAIN_ENABLED
    description: Pulp setting that determines if domains are enabled.
    value: "false"
  - name: PULP_API_REPLICAS
    description: Number of pulp api replicas
    value: "1"
  - name: PULP_WEB_REPLICAS
    description: Number of pulp web replicas
    value: "0" # setting to 0 because we are using an ingress as a reverse proxy
  - name: PULP_WORKER_REPLICAS
    description: Number of pulp workers
    value: "1"
  - name: PULP_CONTENT_REPLICAS
    description: Number of pulp content replicas
    value: "1"
  - name: PULP_API_CPU_REQUEST
    description: Amount of CPU to request for the API pods
    value: "500m"
  - name: PULP_CONTENT_CPU_REQUEST
    description: Amount of CPU to request for the Content pods
    value: "250m"
  - name: PULP_WORKER_CPU_REQUEST
    description: Amount of CPU to request for the Worker pods
    value: "250m"
  - name: PULP_API_CPU_LIMIT
    description: Limit of CPU use by API pods
    value: "1000m"
  - name: PULP_CONTENT_CPU_LIMIT
    description: Limit of CPU use by Content pods
    value: "500m"
  - name: PULP_WORKER_CPU_LIMIT
    description: Limit of CPU use by Worker pods
    value: "500m"
  - name: PULP_API_MEMORY_REQUEST
    description: Amount of memory to request for API pods
    value: "256Mi"
  - name: PULP_CONTENT_MEMORY_REQUEST
    description: Amount of memory to request for Content pods
    value: "256Mi"
  - name: PULP_WORKER_MEMORY_REQUEST
    description: Amount of memory to request for Worker pods
    value: "1024Mi"
  - name: PULP_API_MEMORY_LIMIT
    description: Limit of memory use by API pods
    value: "512Mi"
  - name: PULP_CONTENT_MEMORY_LIMIT
    description: Limit of memory use by Content pods
    value: "512Mi"
  - name: PULP_WORKER_MEMORY_LIMIT
    description: Limit of memory use by Worker pods
    value: "2048Mi"
  - name: TELEMETRY_ENABLED
    description: Enables the application to send telemetry data.
    value: "true"
  - name: OTEL_EXPORTER_OTLP_PROTOCOL
    description: Defines the protocol used to feed the OpenTelemetry collector.
    value: "http/protobuf"
  - name: OTEL_EXPORTER_OTLP_ENDPOINT
    description: The collector endpoint used to receive telemetry data from the application.
    value: "http://pulp-otel-collector:10000/"
  - name: OTEL_METRIC_EXPORT_INTERVAL
    description: The time interval (in milliseconds) between the start of two export attempts.
    value: "60000"
  - name: OTEL_METRIC_EXPORT_TIMEOUT
    description: Maximum allowed time (in milliseconds) to export data.
    value: "7000"
  - name: OTEL_COLLECTOR_CPU_REQUEST
    description: Amount of CPU to request for OpenTelemetry Collector container
    value: "250m"
  - name: OTEL_COLLECTOR_CPU_LIMIT
    description: Limit of CPU use by OpenTelemetry Collector container
    value: "500m"
  - name: OTEL_COLLECTOR_MEMORY_REQUEST
    description: Amount of memory to request for OpenTelemetry Collector container
    value: "1024Mi"
  - name: OTEL_COLLECTOR_MEMORY_LIMIT
    description: Limit of memory use by OpenTelemetry Collector contaienr
    value: "2048Mi"
  - name: DB_SECRET_NAME
    description: Name of the secret with external database information for the operator.
    value: "pulp-external-database"
  - name: CONTENT_ORIGIN
    description: The value for the CONTENT_ORIGIN pulp setting
    value: http://pulp-content.local
  - name: OBJECT_STORE_NAME
    description: The name of the S3 bucket.
    value: pulp-stage-default-domain-s3
  - name: PULP_AUTHENTICATION_BACKENDS
    description: The AUTHENTICATION_BACKENDS to be used by Pulp.
    value: "@merge django.contrib.auth.backends.RemoteUserBackend"
  - name: PULP_REST_FRAMEWORK__DEFAULT_AUTHENTICATION_CLASSES
    description: The defaul authentication classes for Pulp.
    value: "['pulp_service.app.authentication.RHServiceAccountCertAuthentication','pulpcore.app.authentication.JSONHeaderRemoteAuthentication','rest_framework.authentication.BasicAuthentication','rest_framework.authentication.SessionAuthentication']"
  - name: PULP_REST_FRAMEWORK__DEFAULT_PERMISSION_CLASSES
    description: The default permission classes for the REST API
    value: "['pulp_service.app.authorization.DomainBasedPermission']"
  - name: PULP_AUTHENTICATION_JSON_HEADER
    description: The name of the header where Authentication information is found.
    value: "HTTP_X_RH_IDENTITY"
  - name: PULP_AUTHENTICATION_JSON_HEADER_JQ_FILTER
    description: The JQ filter used to filter authentication info.
    value: ".identity.user.username"
  - name: PULP_AUTHENTICATION_JSON_HEADER_OPENAPI_SECURITY_SCHEME
    description: The security scheme to be send to external clients to authenticate on api gateway.
    value: >
      '@json {"type": "oauth2", "description": "External OAuth2 integration", "flows": { "clientCredentials": { "tokenUrl": "https://sso.stage.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token", "scopes": {"api.console": "grant_access_to_pulp"}}}}'
  - name: PULP_API_ROOT
    description: The root path to the API
    value: "/api/pulp/"
  - name: PULP_DB_ENCRYPTION_KEY
    description: Path to DB encryption key
    value: "/etc/pulp/keys/database_fields.symmetric.key"
  - name: PULP_CACHE_ENABLED
    description: Enable CACHE. Need REDIS installed.
    value: "true"
  - name: PULP_AWS_DEFAULT_ACL
    description: AWS default ACL
    value: "@none None"
  - name: PULP_S3_USE_SIGV4
    description: S3 using SIGV4
    value: "true"
  - name: PULP_AWS_S3_SIGNATURE_VERSION
    description: S3 Signature version
    value: "s3v4"
  - name: PULP_AWS_S3_ADDRESSING_STYLE
    description: S3 Addressing style
    value: "path"
  - name: PULP_DEFAULT_FILE_STORAGE
    description: Pulp default file storage
    value: "storages.backends.s3boto3.S3Boto3Storage"
  - name: PULP_MEDIA_ROOT
    description: Pulp media root
    value: ""
  - name: PULP_CONTENT_ORIGIN
    description: Content Origin
    value: "http://pulp-content:8000"
  - name: PULP_CONTENT_PATH_PREFIX
    description: Content Path Prefix
    value: "/api/pulp-content/"
  - name: PULP_DOMAIN_ENABLED
    description: Domain Enabled
    value: "true"
  - name: PULP_ALLOWED_CONTENT_CHECKSUMS
    description: Checksums that Pulp can use to validate packages.
    value: "[\"sha224\", \"sha256\", \"sha384\", \"sha512\"]"
  - name: PULP_API_GUNICORN_WORKERS
    description: Number of gunicorn workers in the API pods
    value: "1"
  - name: PULP_INSTALLED_APPS
    description: Installed Django apps
    value: "@merge django.contrib.admin.apps.SimpleAdminConfig"
  - name: PULP_CSRF_TRUSTED_ORIGINS
    value: "['https://*.apps.crc-eph.r9lp.p1.openshiftapps.com']"
  - name: PULP_STATIC_URL
    description: The path to the static assets needed by some Django apps
    value: "/api/pulp/assets/"
